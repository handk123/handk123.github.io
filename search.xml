<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Error]]></title>
      <url>/2018/02/02/Error/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> Bug </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Sql语句]]></title>
      <url>/2018/01/30/mysql/</url>
      <content type="html"><![CDATA[<h2 id="1-sql基础教程"><a href="#1-sql基础教程" class="headerlink" title="1.sql基础教程"></a>1.sql基础教程</h2><font color="#FF4500" size="2">注意：sql对大小写不敏感</font>

<pre><code>sql：结构化查询语言,使我们有能力访问数据库;是一种ANSI的标准计算语言

sql分为：DML(数据操作语言)、DDL(数据定义语言)
    DML：select,update.delete,insert into
    DDL: 创建和删除表格,可以定义索引(键),规定表之间的链接,施加表之间的约束
常用的DML语句：
    create database 创建新数据库
    alter database 修改数据库
    create table 创建新表
    alter table 修改数据库表
    drop table 删除表
    create index 创建索引(搜索键)
    drop index 删除索引

select: 从表中获取数据,结果存储在结果集中
    select 列名称 from 表名称
    select * from 表名称

distinct: 返回唯一不同的值
    select distinct 列名称 from 表名称

where；有条件的从表中获取数据
    select 列名称 from 表名称 where 列 运算符 值
    运算符：
        =    等于
        &lt;&gt;    不等于
        &gt;    大于
        &lt;    小于
        &gt;=    大于等于
        &lt;=    小于等于
        BETWEEN    在某个范围内
        LIKE    搜索某种模式
</code></pre><font color="#FF4500" size="2">注意：sql使用单引号来环绕文本值(大部分数据库系统也接受双引号),如果是数值，不能使用引号</font>

<pre><code>and和or: 用于基于一个以上的条件对记录进行过滤
    A and b ,一假则假; 如果第一个和第二个都成立,显示一条记录
    A or B 一真则真; 如果第一个和第二个只要有一个成立,就显示一条记录
    select * from Users where uno = 10 and uname = &apos;aa&apos;;
    select * from Users where un0 = 10 or uname =&apos;aa&apos;;
    select * from Persons where (firstname = &apos;Thomas&apos; or firstname = &apos;William&apos;) and lastname = &apos;Carter&apos;;

order by:用于对结果集进行排序
    a.用于根据指定的列对结果集进行排序
    b.默认按照升序对记录进行排序
    c.如果想按照降序,使用关键字 desc
    select company,ordernumber from Orders order by company //以字母顺序显示公司名称
    select company, ordernumber from Orders order by company,ordernumber //以字母顺序显示公司名称,并以数字顺序显示顺序号
    select company, ordernumber from Orders order by company desc //以字母降序的顺序显示公司名称
    select company, ordernumber from Orders order by company desc, ordernumber asc //以字母降序的顺序显示公司名称,并以数字顺序显示顺序号
    注意: 在第四个语句中有两个相等的公司名称。只有这一次，在第一列中有相同的值时，第二列是以升序排列的。如果第一列中有些值为 nulls 时，情况也是这样的。

insert into: 用于向表格中插入新的行
    insert into 表名称 values (值1,值2,...)
    insert into Persons vlues(&apos;a&apos;,&apos;b&apos;,&apos;c&apos;);
    insert into Persons(Lastname,Address) velues(&apos;a&apos;,&apos;b&apos;);

update: 用于修改表中的数据
    update 表名称 set 列名称 = 新值 where 列名称 = 值
    update Person set FirstName = &apos;a&apos; where LastName = &apos;b&apos;;
    update Person set Address = &apos;西三旗&apos;, City = &apos;北京&apos; where LastName = &apos;a&apos;;

delete: 用于删除表中的行
    delete from 表名称 where 列名称 = 值
    delete from Person where LastName = &apos;a&apos;;
    delete * from table_name //在不删除表的情况下删除所有的行,表的结构、属性和索引都是正常的
</code></pre><h2 id="2-sql高级编程"><a href="#2-sql高级编程" class="headerlink" title="2.sql高级编程"></a>2.sql高级编程</h2><pre><code>top子句：用于规定要返回的记录的数目
select top 2 * from Persons //选取头两条记录
select top 50 percent * from Persons //选取50%的记录
mysql用法：
    select column_name(s)
    from table_name
    limit number
oracle用法：
    select column_name(s)
    from table_name
    where rownum &lt;= number

like:用于wehere 子句中搜索列的指定模式
    select column_name(s) from table_name where column_name like pattern

    select * from Persons where City like &apos;N%&apos;  //选取Persons表中居住以N开始的城市中的人
    select * from Persons where City like &apos;%g&apos; //选取Persons表中居住在以g结尾的城市里的人
    select * from Persons where City like &apos;%ln%&apos; //选取Persons 表中居住城市含有ln字母的人
    select * from Persons where City not like &apos;%ln%&apos; //选取Persons表中居住城市不包含l字母的人

SQL通配符：进行搜索数据库中的数据时,通配符可以替代一个或多个字符
    SQL通配符必须与like运算符一起运用
    通配符：
        %    替代一个或多个字符
        _    仅替代一个字符
        charlist]    字符列中的任何单一字符
        [^charlist]
        或者        不在字符列中的任何单一字符
        [!charlist]
    select * from Persons where City like &apos;N%&apos; //选取居住以N开始的城市里的人
    select * from Persons where City like &apos;%LN%&apos; //选取居住包含LN的城市里的人
    select * from Persons where FirstName like &apos;_he&apos; //选取名字第一个字符之后是&quot;he&quot;的人
    select * from Persons where LastName like &apos;A_r_h&apos; //选取名字以&quot;A&quot;开头,然后是一个任意字符，然后是&quot;r&quot;,然后是任意字符,然后是&quot;h&quot;
    select * from Persons where City like &apos;[ALN]%&apos; //选取居住城市以&quot;A&quot; 或 &quot;L&quot; 或 &quot;N&quot; 开头的人
    select * from Persons where City like &apos;[!ALN]%&apos; //选取居住城市不以&quot;A&quot; 或 &quot;L&quot; 或 &quot;N&quot; 开头的人
in：允许在where子句中规定多个值
    select * from table_name where column_name in (value1,value2,...)
    select * from Persons where LastName in (&apos;ad&apos;,&apos;bc&apos;) //选取姓氏为ad,bc的人

between:在where 子句中使用,作用是选取介于两值之间的数据范围
    select * from table_name where column_name between value1 and value2
    select * from Persons where LastName between &apos;a&apos; and &apos;b&apos; //显示介于a(包括)和b(不包括)之间的人
    select * from Persons where LastName not between &apos;a&apos; and &apos;b&apos; //上述例子显示之外的人

Alias:别名
    针对表来说： select * from table_name as alias_name
    针对列来说： select column_name as alias_name from table_name

    select po.Id,p.LastName,p.FirstName from Persons as p,Pro_Oder as po where p.LastName = &apos;a&apos; and p.FirstName =&apos;b&apos; //使用表名别名
    select LastName as Family,FirstName as Name From Persons  //使用一个列名别名
</code></pre><h5 id="join-根据两个或者多个表中的列之间的关系-从这些表中查询数据"><a href="#join-根据两个或者多个表中的列之间的关系-从这些表中查询数据" class="headerlink" title="join:根据两个或者多个表中的列之间的关系,从这些表中查询数据"></a>join:根据两个或者多个表中的列之间的关系,从这些表中查询数据</h5><pre><code>未使用join:
select Persons.LastName, Persons.FirstName, Orders.OrderNo
from Persons, Orders
where Persons.Id_P = Orders.Id_p  //引用两个表
使用join:
select Persons.LastName,Persons.FirstName,Orders.OrderNo
from Persons
inner join Orders on Persons.Id_P  = Orders.Id_P
order by Persons.LastName
</code></pre><h5 id="inner-join-内连接-当表中存在至少一个匹配时候-inner-join关键字返回行"><a href="#inner-join-内连接-当表中存在至少一个匹配时候-inner-join关键字返回行" class="headerlink" title="inner join:内连接,当表中存在至少一个匹配时候,inner join关键字返回行"></a>inner join:内连接,当表中存在至少一个匹配时候,inner join关键字返回行</h5><pre><code>inner join 和 join 是相同的
select * from table_name1
inner join table_name2
on table_name1.column_name = table_name2.column_name

select Persons.LastName,Persons.FirstName,Orders.OrderNo
from Persons
inner join Orders
on Persons.Id_p = Orders.Id_p
order by Persons.LastName
</code></pre><h5 id="left-join-左连接-会从左表-table-name1-那里返回所有的行-即使在右表-table-name2-中没有匹配的行"><a href="#left-join-左连接-会从左表-table-name1-那里返回所有的行-即使在右表-table-name2-中没有匹配的行" class="headerlink" title="left join:左连接,会从左表(table_name1)那里返回所有的行,即使在右表(table_name2)中没有匹配的行"></a>left join:左连接,会从左表(table_name1)那里返回所有的行,即使在右表(table_name2)中没有匹配的行</h5><pre><code>select column_name(s) from table_name1
left join table_name2
on table_name1.column_name = table_name2.column_name

select user.uname,user.job,emp.ename from emp
LEFT JOIN user
ON user.eno = emp.eno;
注意：在某些数据库中,left join 称为 left outer join
</code></pre><p><img src="/images/左连接.png" alt="“图片描述”"></p>
<h5 id="right-join-右连接-会从右表-table-name2-那里返回所有的行-即使在左表-table-name1-中没有匹配的行"><a href="#right-join-右连接-会从右表-table-name2-那里返回所有的行-即使在左表-table-name1-中没有匹配的行" class="headerlink" title="right join:右连接,会从右表(table_name2)那里返回所有的行,即使在左表(table_name1)中没有匹配的行"></a>right join:右连接,会从右表(table_name2)那里返回所有的行,即使在左表(table_name1)中没有匹配的行</h5><pre><code>select column_name(s) from table_name1
right join table_name2
on table_name1.column_name = table_name2.column_name

select user.uname,user.job,emp.ename
from user RIGHT JOIN emp
ON user.eno = emp.eno;
</code></pre><p><img src="/images/右连接.png" alt="“图片描述”"></p>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL数据库]]></title>
      <url>/2018/01/30/dba-mysql/</url>
      <content type="html"><![CDATA[<h2 id="1-Mysql常用的命令："><a href="#1-Mysql常用的命令：" class="headerlink" title="1.Mysql常用的命令："></a>1.Mysql常用的命令：</h2><pre><code>登陆mysql数据库：mysql -u root -p
Dos下的清屏：cls
显示帮助的命令清单：\h;
清除当前输入的语句：\c
查询当前安装mysql版本号：select version();
查看mysql服务器状态信息：\s  (\status)效果一样
退出数据库:\q;
数据库的导入和导出：
    导入：source 库名.sql
    导出：mysqldump -u 用户名 -p 库名&gt;库名.sql
显示所有的数据库：show databases;
选择数据库：use 库名
查看当前数据库中的所有表：select database();
</code></pre><h2 id="2-Mysql中的字段类型"><a href="#2-Mysql中的字段类型" class="headerlink" title="2.Mysql中的字段类型"></a>2.Mysql中的字段类型</h2><pre><code>Int:
    4个字节,32位,无符号最小值:0,最大值:4294967295
    比如：Int(5),5跟字段类型允许的范围无关,只是在数据库表中显示的位数为5,位数不够用0填补(前提设置了zero fill)。比如你存的数字是123，在数据库中显示为00123，但是读出来还是123，没有0；位数大于5，比如存123456，就还是显示123456；
Vachar：
    比如：varchar(50),跟mysql版本有关系
        4.0版本以下,指50字节,如果存放UTF-8汉字,只能存16个(每个汉字3字节)
        5.0版本以上,指50字符,无论存放UTF-8汉字、字母还是数字都可以存放50个
</code></pre><h2 id="3-Mysql操作语言"><a href="#3-Mysql操作语言" class="headerlink" title="3.Mysql操作语言"></a>3.Mysql操作语言</h2><h3 id="emsp-1-DDL：数据定义语言"><a href="#emsp-1-DDL：数据定义语言" class="headerlink" title="&emsp;1)DDL：数据定义语言"></a>&emsp;1)DDL：数据定义语言</h3><pre><code>作用：定义数据库或者表结构
关键字：create,alter,drop
创建数据库：create database 数据库名
删除数据库：drop datebase 数据库名
创建表结构：create table 表名
                列名 列的数据类型 列的完整性约束;
    注意:主键约束,primary key 一张表就一个主键,非空且唯一
         唯一性,unique 不允许重复,但是可以为空,可以定义多个唯一约束
         有外键时,先建父表,在创建子表;插入数据时候,先插入父表,再插入子表;删除数据时,先删除子表数据,再删除父表数据
查看表结构：desc 表名(常用)、describe 表名、show columns from 表名、
修改表的名称：alter table 原表名 rename to 新表名;rename table 原表名 to 新表名;
修改表的编码字符集：alter table 表名 character set    字符集;
向表中添加一列:
    alter table 表名 change 原列名 新列名 列数据类型(修改表中的某一列列名，同时修改列的数据类型)
    alter table 表名 modify 列名 列新的数据类型(修改表中的某一列的数据类型)
删除表中的某一列：alter table 表名 drop 列名;
删除表：drop table (彻底删除表,数据库中不会保留表结构)、truncate 表名
</code></pre><h3 id="emsp-2-DML：数据操作语言"><a href="#emsp-2-DML：数据操作语言" class="headerlink" title="&emsp;2)DML：数据操作语言"></a>&emsp;2)DML：数据操作语言</h3><pre><code>作用：操作表中的数据
关键字：insert,update,delete
向表中插入数据：
    insert into 表名 values(列值1,列值2,....)(插入顺序和建表顺序对应)
    insert into 表名 values(列值1,列值2,....)(常用)
    insert into 表名 values(列值1,列值2,..)(列值1,列值2,..)(一次插入多条数据)
修改某一列的所有字段值为新的字段值：
    update 表名 set 列名 = 新字段值;
    update 表名 set 列名 = 新字段值, 列名=新字段值....;(用于批量修改)
修改某一条记录的字段值：
    update 表名 set 列名 = 新字段值 where 列名 = 字段值;
    update 表名 set 列名 = 新字段值,列名=新字段值...where 列名=新字段值...where 列名=字段值；(多个字段的字段值都是该值)
删除表中的某一条记录：delete from 表名 where 列名 = 列值;
删除表: delete from 表名;
注意:drop、truncate、delete区别？
    a)drop和truncate是DDL,而delete是DML。
    b)truncate和delete只删除数据，不会删除表的结构，而drop会把数据和表结构都删除。
    c)delete可以带where有条件的删除，可以回滚(rollback)，但删除速度较truncate较慢。而truncate则不可以删除特定的数据，也不可以回滚(rollback)，但删除速度比delete快。
建议：小心使用drop和truncate，尤其在数据没有备份的情况下
</code></pre><h3 id="emsp-3-DQL-数据查询语言"><a href="#emsp-3-DQL-数据查询语言" class="headerlink" title="&emsp;3)DQL: 数据查询语言"></a>&emsp;3)DQL: 数据查询语言</h3><pre><code>关键字：select
查询表中所有的记录:
    select * from 表名 (表中所有的列)
    select 列1,列2,..from 表名;(效果同上)
查询表中某一条记录：select * from 表名 where 列名 = 字段值;
过滤表中重复的数据(关键字distinct): select distinct 列名 from 表名;
排序(关键字order by):
    select * from 表名 order by 列名 asc; (默认是升序,asc可省略)
    select * from 表名 order by 列名 desc; (降序)
    例：select sno,sname,grade from student order by grade desc;
分页查询(关键字limit):
    select * from 表名 limit(pageNo-1)*pagesize,pagesize;
        pageNo:要查询的页数; pageSize:每页显示的记录数
模糊查询(关键字like): select * from 表名 where 列名 like &apos;%&apos;;
范围查询(关键字between..and..,in()): select * from 表名 where 列名  between 字段值(小) and 字段值(大);//包含两端的字段值
使用别名: select 字段名 别名,字段名 别名 from 表名;
复制表：create table 新表名 select * from 被复制表的表名;(新表的表结构和数据与原表相同)
聚合函数：
    a)返回指定列非空值的个数：select count(列名) from 表名
    b)返回指定列的最值：select  max(列名) from 表名; min(列名)最小
    c)返回指定列的平均：select avg(列名) from 表名;
    d)返回指定列的所有值之和：select sum(列名) from 表名;
</code></pre>]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2018年新的开始]]></title>
      <url>/2018/01/28/myfirst/</url>
      <content type="html"><![CDATA[<h2 id="新的征程"><a href="#新的征程" class="headerlink" title="新的征程"></a>新的征程</h2><p>&emsp;之前在很久的时候，就想过可以有写自己东西的一个地方，不管是笔记还是一些随笔，但是始终都没有发现过好一点的记录器，一次偶然的机会发现了可以自己搭建博客，所以花了大概前前后后4天，搭建好了，可以在这里边写一些技术上的还有一些生活上的琐事，也算是自己的一个小库吧。</p>
<h3 id="关于18年的计划"><a href="#关于18年的计划" class="headerlink" title="关于18年的计划"></a>关于18年的计划</h3><ul>
<li>数据库知识梳理</li>
<li>框架知识整理</li>
<li>动手写相关代码</li>
<li>坚持每天学习</li>
</ul>
<h3 id="关于本人"><a href="#关于本人" class="headerlink" title="关于本人"></a>关于本人</h3><p>&emsp;但行好事，不问前程</p>
]]></content>
      
        <categories>
            
            <category> 生活 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Oracle中的sql函数]]></title>
      <url>/2018/01/28/dba-2/</url>
      <content type="html"><![CDATA[<h2 id="1-oracle中的sql相关"><a href="#1-oracle中的sql相关" class="headerlink" title="1.oracle中的sql相关"></a>1.oracle中的sql相关</h2><h3 id="emsp-1-oracle-中的数据类型"><a href="#emsp-1-oracle-中的数据类型" class="headerlink" title="&emsp;1)oracle 中的数据类型"></a>&emsp;1)oracle 中的数据类型</h3><pre><code>    字符型：
        char:1-2000字节的定长字符
        varchar2:1-4000字节的变长字符
    数值型：
        number:最高精度38位
    日期时间型：
        date:精确到ss
        timestamp:秒值精确到小数点后6位
    函数：
        sysdate,systimestamp返回系统的当前日期,时间和时区
    伪列：
        rowid,rownum
        rowid:表中行的存储地址，可唯一标示数据库中的某一行，可以使用该列快速定位表中的行。
        rownum:查询返回结果集中的行的序号，可以使用它来限制查询返回的行数
更改时间的显示：
    alter session set nls_date_language=’japanse’;
    alter session set nls_date_format=’yyyy-mm-dd’;
</code></pre><h3 id="emsp-2-sql支持的命令"><a href="#emsp-2-sql支持的命令" class="headerlink" title="&emsp;2)sql支持的命令"></a>&emsp;2)sql支持的命令</h3><pre><code>数据定义语言（DDL）:create,alter,drop
数据操纵语言（DML）:insert,delete,update,select
    利用现有的表创建表
    create table stu_tbl_log as select id,stu_name,stu_age from stu_tbl;--
    选择无重复的行
    select distinct stu_name from stu_tbl;--
    插入来自其他表中的记录
    insert into stu_tbl_log select id,stu_name,stu_age from stu_tbl;
数据控制语言（DCL）:grant,revoke
事务控制语言（TCL）:commit,savepoint,rollback
</code></pre><h3 id="emsp-3-操作表的命令"><a href="#emsp-3-操作表的命令" class="headerlink" title="&emsp;3)操作表的命令"></a>&emsp;3)操作表的命令</h3><pre><code>create table 创建
alter table    修改
truncate table    默认所有的表内容都删除,删除速度比delete快
drop table    用于删除表（表的结构、属性以及索引也会被删除）
</code></pre><h3 id="emsp-4-修改表命令"><a href="#emsp-4-修改表命令" class="headerlink" title="&emsp;4)修改表命令"></a>&emsp;4)修改表命令</h3><pre><code>alter table stu_table rename to stu_tbl;--修改表名
alter table stu_tbl rename column stu_sex to sex;--修改列名
alter table stu_tbl add (stu_age number);--添加新列
alter table stu_tbl drop(sex);--删除列
alter table stu_tbl modify(stu_sex varchar2(2));--更改列的数据类型
alter table stu_tbl add constraint pk_stu_tbl primary key(id);--添加约束
</code></pre><h3 id="emsp-5-操作符"><a href="#emsp-5-操作符" class="headerlink" title="&emsp;5)操作符"></a>&emsp;5)操作符</h3><pre><code>算术操作符:+-*/
比较操作符:=,!=,&lt;&gt;,&gt;,&lt;,&gt;=,&lt;=,between-and,in,like,is null等
逻辑操作符:Land,or,not
集合操作符:Lunion,union all,intersect,minus
    minus是获取第一张表独有的数据
    inhexo tersect是获取两张表中都有的数据
    union是整合两张表的数据，都有的只显示一次
    union all是纯粹的两张表数据整合
连接操作符: ||
</code></pre><h2 id="2-oracle中的数据库对象"><a href="#2-oracle中的数据库对象" class="headerlink" title="2.oracle中的数据库对象"></a>2.oracle中的数据库对象</h2><h3 id="emsp-1-锁：数据库用来控制共享资源并发访问的机制。"><a href="#emsp-1-锁：数据库用来控制共享资源并发访问的机制。" class="headerlink" title="&emsp;1)锁：数据库用来控制共享资源并发访问的机制。"></a>&emsp;1)锁：数据库用来控制共享资源并发访问的机制。</h3><pre><code>锁的类型：行级锁，表级锁
    行级锁：对正在被修改的行进行锁定。行级锁也被称之为排他锁。
在使用下列语句时，Oracle会自动应用行级锁：
    insert,update,delete,select…… for update
    select……for update允许用户一次锁定多条记录进行更新。
    使用commit or rollback释放锁。
表级锁：
    lock table user_tbl in mode mode;
表级锁类型：
    行共享 row share
    行排他 row exclusive
    共享 share
    共享行排他 share row exclusive
    排他 exclusive
死锁：两个或两个以上的事务相互等待对方释放资源，从而形成死锁
</code></pre><h3 id="emsp-2-数据库对象"><a href="#emsp-2-数据库对象" class="headerlink" title="&emsp;2)数据库对象"></a>&emsp;2)数据库对象</h3><pre><code>oracle数据库对象又称模式对象
数据库对象是逻辑结构的集合，最基本的数据库对象是表
数据库对象：
    表，序列，视图，索引
</code></pre>]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Oracle数据库]]></title>
      <url>/2018/01/24/dba/</url>
      <content type="html"><![CDATA[<h2 id="一、基础部分："><a href="#一、基础部分：" class="headerlink" title="一、基础部分："></a>一、基础部分：</h2><h3 id="创建临时表空间-sys用户才可以创建表空间"><a href="#创建临时表空间-sys用户才可以创建表空间" class="headerlink" title="创建临时表空间 (sys用户才可以创建表空间)"></a>创建临时表空间 (sys用户才可以创建表空间)</h3><pre><code>create temporary tablespace 临时表空间名
   tempfile &apos;G:\app\ASUS\oradata\orcl\创建一个dbf后缀的文件&apos; (自己本机安装位置)
   size 10M
   autoextend on
   next 10M maxsize unlimited
   extent management local;
</code></pre><h3 id="创建表空间"><a href="#创建表空间" class="headerlink" title="创建表空间"></a>创建表空间</h3><pre><code>create tablespace 表空间名
    logging datafile &apos;G:\app\ASUS\oradata\orcl\创建一个dbf后缀的文件且与上方的文件名字不同&apos;
    size 10M
    autoextend on
    next 10M maxsize unlimited
    extent management local;
</code></pre><h3 id="创建用户并指定表空间"><a href="#创建用户并指定表空间" class="headerlink" title="创建用户并指定表空间"></a>创建用户并指定表空间</h3><pre><code>create user newuser identified by 表空间名
    account unlock
    default tablespace 表空间名;
</code></pre><h3 id="授权给新建的用户"><a href="#授权给新建的用户" class="headerlink" title="授权给新建的用户"></a>授权给新建的用户</h3><pre><code>grant connect,resource to newuser
grant dba to newuser;
</code></pre><h3 id="授权操作表的权限"><a href="#授权操作表的权限" class="headerlink" title="授权操作表的权限"></a>授权操作表的权限</h3><pre><code>grant select,insert on 表名 to scott; (当前用户)
grant delete,update on 用户名.表名 to scott; (系统管理员)
</code></pre><h2 id="二、Oracle数据库常用内置函数："><a href="#二、Oracle数据库常用内置函数：" class="headerlink" title="二、Oracle数据库常用内置函数："></a>二、Oracle数据库常用内置函数：</h2><h3 id="1-分类"><a href="#1-分类" class="headerlink" title="1.分类"></a>1.分类</h3><pre><code>1）单行函数
    a.字符函数
    b.数字函数
    c.转换函数
    d.日期函数
2）聚合函数
</code></pre><h3 id="2-详细介绍"><a href="#2-详细介绍" class="headerlink" title="2.详细介绍"></a>2.详细介绍</h3><h4 id="emsp-1-单行函数-就是说我们在进行表的操作上时，只能够输入一行，然后输出一个结果"><a href="#emsp-1-单行函数-就是说我们在进行表的操作上时，只能够输入一行，然后输出一个结果" class="headerlink" title="&emsp;1)单行函数:就是说我们在进行表的操作上时，只能够输入一行，然后输出一个结果"></a>&emsp;1)单行函数:就是说我们在进行表的操作上时，只能够输入一行，然后输出一个结果</h4><h5 id="emsp-emsp-a-字符函数：操作的对象是字符串"><a href="#emsp-emsp-a-字符函数：操作的对象是字符串" class="headerlink" title="&emsp;&emsp;a.字符函数：操作的对象是字符串"></a>&emsp;&emsp;a.字符函数：操作的对象是字符串</h5><pre><code>常用的有：
    ascii(X): 返回字符X的ASCII码
    chr(X):    将ascii值转换为对应的字符
    concat(X,Y): 连接字符串X,y
    lower(X): 将字符串X转换成小写
    upper(X): 将字符串X中所有的字符转换为大写
    initcap(X): 将字符串X中所有的内容，首写字母大写,其余字母小写
    例：select ascii(&apos;A&apos;),chr(&apos;65&apos;),concat(&apos;ha&apos;,&apos;ppy&apos;),lower(&apos;Ha&apos;),upper(&apos;ha&apos;),initcap(&apos;HeN word&apos;) from dual;
        结果：65    A    happy     ha    HA    Hen Word

    instr(a1,a2,x,y): 取子串a2在a1中的位置
        x表示在a1中开始搜索的位置,y表示字符串a2出现的次数
        如果x表示负数，就说明从尾部开始的搜索,一般x,y默认为1
    例：select instr(&apos;aaahellohello&apos;,&apos;he&apos;,1,1),instr(&apos;aaahellohello&apos;,&apos;he&apos;,1,2),instr(&apos;aaahellohello&apos;,&apos;he&apos;,-1,1) from dual;
        结果：4        9        9
    substr(a1,x,y):    在字符串a1中,从x开始,长度为y的子串
        x&gt;0,从头开始搜索
        x&lt;0,从尾部开始搜索
    select substr(&apos;12345678&apos;,-2,2),substr(&apos;123456&apos;,3,2) from dual;
        结果：78 34
    ltrim(a1,set): 从a1左边开始,除了set中的字符,全部打印出来(若set中的字符在a1中间,则将a1全部打印出来)
    rtrim(a1,set):    从a1右边开始,只要遇见不是set中的字符,马上结束并返回结果(若set中的字符在a1中间,则将a1全部打印出来)
    trim(c from a2): 只能从a2的头部,尾部,或者两端截去字符c(c只能是一个字符)
    replace(a1,a2,a3): 将a1字符串中的子串a2用a3代替.
        若a2为null,则返回原来a1;若a3为null,则会去掉子串a2,重新打印出a1
        select replace(&apos;aa-bb&apos;,&apos;bb&apos;,&apos;c&apos;),
            replace(&apos;aa-bb&apos;,&apos;bb&apos;),
            replace(&apos;aa-bb&apos;,&apos;c&apos;)
        from dual;
        结果：aa-c  aa- aa-bb
</code></pre><h5 id="emsp-emsp-b-数字函数：参数可以是表中的-也可以是一个数字表达式"><a href="#emsp-emsp-b-数字函数：参数可以是表中的-也可以是一个数字表达式" class="headerlink" title="&emsp;&emsp;b.数字函数：参数可以是表中的,也可以是一个数字表达式"></a>&emsp;&emsp;b.数字函数：参数可以是表中的,也可以是一个数字表达式</h5><pre><code>常用的有：
    ans(x):返回数字x的绝对值    abs(-2.5) 2.5
    ceil(x):返回值&gt;=n的最小整数        ceil(-2.5) -2; ceil(2.5) 3
    floor(x):返回值&lt;=数字n的最大整数    floor(123.3) 123; floor(-123.3) -124
    round(x,[a]):四舍五入到整数位. a&lt;0,到小数点前a位;a&gt;0,到小数点后a位 round(155.34567,-2) 200;round(155.34567,2) 155.35
    trunc(x,[a]):不四舍五入,根据a来截取x中的数字. a&lt;0,截取到小数点前a位;a&gt;0,到小数点后a位 (155.34567,-2) 100;(155.34567,2) 155.34
    mod(a,b)：返回a/b的余数,如果数字b=0,那么返回a mod(3,4) 3
</code></pre><h5 id="emsp-emsp-c-日期函数-对日期进行运算"><a href="#emsp-emsp-c-日期函数-对日期进行运算" class="headerlink" title="&emsp;&emsp;c.日期函数:对日期进行运算"></a>&emsp;&emsp;c.日期函数:对日期进行运算</h5><pre><code>常用的有：
    add_months(a,b):在日期a上,加上指定月数b,返回计算后的新日期
        select sysdate,add_months(sysdate,3) from dual; 1月24  4月24
    last_day(a)：返回指定日期当月的最后一天
        select sysdate,last_day(sysdate) from dual; 1月31
    round(a,[,fmt]):a是日期,fmt是四舍五入日期的值的格式.默认fmt是一个月中的某一天：&quot;DDD&quot;
        1)fmt默认为&quot;DDD&quot;,当前日期最靠近的那一天,根据日期分前半天,后半天
        2)如果fmt是&quot;DAY&quot;,会舍入到最近周的周日,就会将上半周舍去,下半周为下一周的周日
        3)如果fmt是&quot;MONTH&quot;,会舍入到某个月的1号,会将前月舍去,后半月作为下一个月
        4)如果fmt是&quot;YEAR&quot;,会舍入到某一年的1月1号,会将前半年舍去,后半年作为下一年
        select sysdate,
            round(sysdate),round(sysdate,&apos;DAY&apos;),round(sysdate,&apos;MONTH&apos;),round(sysdate,&apos;year&apos;)
            from dual;
        2018/1/24 星期三 19:07:59    2018/1/25 星期四    2018/1/28 星期日    2018/2/1 星期四    2018/1/1 星期一

    trync(d,[,fmt])：不对日期进行四舍五入,直接截取到第一天(上述不同格式)
    extract(fmt from d):用于提取日期中的特定部分
        select sysdate,extract(MONTH from sysdate) from dual;
            2018/1/24 星期三 19:23:29    1
</code></pre><h5 id="emsp-emsp-d-转换函数：一种数据类型转换为另外一种数据类型"><a href="#emsp-emsp-d-转换函数：一种数据类型转换为另外一种数据类型" class="headerlink" title="&emsp;&emsp;d.转换函数：一种数据类型转换为另外一种数据类型"></a>&emsp;&emsp;d.转换函数：一种数据类型转换为另外一种数据类型</h5><pre><code>常用的有：
    to_char():把日期和数字转换为制定格式的字符串.
    select to_char(sysdate,&apos;yyyy-mm-dd hh12:mi:ss&apos;) from dual;
    2018-01-24 07:40:56
</code></pre><h2 id="三、其他单行函数"><a href="#三、其他单行函数" class="headerlink" title="三、其他单行函数"></a>三、其他单行函数</h2><pre><code>1. nvl(a,b): 当a=null时,返回b,否则返回a
2. nvl2(a,b,c): 当a=null时,返回c,否则返回b
3. nullif(a,b): 当a=b时,返回null,否则返回a
</code></pre><h2 id="四、分组函数"><a href="#四、分组函数" class="headerlink" title="四、分组函数"></a>四、分组函数</h2><pre><code>avg()
min()
max()
sum()
count()
group by()
having()
</code></pre>]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
